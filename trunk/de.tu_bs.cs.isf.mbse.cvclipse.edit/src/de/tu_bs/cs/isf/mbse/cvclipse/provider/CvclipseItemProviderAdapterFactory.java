/**
 */
package de.tu_bs.cs.isf.mbse.cvclipse.provider;

import de.tu_bs.cs.isf.mbse.cvclipse.util.CvclipseAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CvclipseItemProviderAdapterFactory extends CvclipseAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CvclipseItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.CV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CVItemProvider cvItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.CV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCVAdapter() {
		if (cvItemProvider == null) {
			cvItemProvider = new CVItemProvider(this);
		}

		return cvItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.Letter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LetterItemProvider letterItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.Letter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLetterAdapter() {
		if (letterItemProvider == null) {
			letterItemProvider = new LetterItemProvider(this);
		}

		return letterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.PersonalInformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonalInformationItemProvider personalInformationItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.PersonalInformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonalInformationAdapter() {
		if (personalInformationItemProvider == null) {
			personalInformationItemProvider = new PersonalInformationItemProvider(this);
		}

		return personalInformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.ItemBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemBlockItemProvider itemBlockItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.ItemBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemBlockAdapter() {
		if (itemBlockItemProvider == null) {
			itemBlockItemProvider = new ItemBlockItemProvider(this);
		}

		return itemBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.ListBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListBlockItemProvider listBlockItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.ListBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListBlockAdapter() {
		if (listBlockItemProvider == null) {
			listBlockItemProvider = new ListBlockItemProvider(this);
		}

		return listBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.DateItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateItemItemProvider dateItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.DateItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateItemAdapter() {
		if (dateItemItemProvider == null) {
			dateItemItemProvider = new DateItemItemProvider(this);
		}

		return dateItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.TextItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemItemProvider textItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.TextItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextItemAdapter() {
		if (textItemItemProvider == null) {
			textItemItemProvider = new TextItemItemProvider(this);
		}

		return textItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.tu_bs.cs.isf.mbse.cvclipse.Date} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateItemProvider dateItemProvider;

	/**
	 * This creates an adapter for a {@link de.tu_bs.cs.isf.mbse.cvclipse.Date}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAdapter() {
		if (dateItemProvider == null) {
			dateItemProvider = new DateItemProvider(this);
		}

		return dateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LanguageToTextMapEntryItemProvider languageToTextMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLanguageToTextMapEntryAdapter() {
		if (languageToTextMapEntryItemProvider == null) {
			languageToTextMapEntryItemProvider = new LanguageToTextMapEntryItemProvider(this);
		}

		return languageToTextMapEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cvItemProvider != null) cvItemProvider.dispose();
		if (letterItemProvider != null) letterItemProvider.dispose();
		if (applicationItemProvider != null) applicationItemProvider.dispose();
		if (personalInformationItemProvider != null) personalInformationItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (itemBlockItemProvider != null) itemBlockItemProvider.dispose();
		if (listBlockItemProvider != null) listBlockItemProvider.dispose();
		if (dateItemItemProvider != null) dateItemItemProvider.dispose();
		if (textItemItemProvider != null) textItemItemProvider.dispose();
		if (dateItemProvider != null) dateItemProvider.dispose();
		if (languageToTextMapEntryItemProvider != null) languageToTextMapEntryItemProvider.dispose();
	}

}
